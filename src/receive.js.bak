// DOM elements
//https://plotly.com/javascript/streaming/
const pulseGraphDiv = document.getElementById('pulseGraphDiv')

/// BLE things, mainly for debug
var device, server, pulseService, pulseCharacteristic
var pData=[];
var cData=[];
var tData=[];
function pulseChanged(evt)
{
	var raw = evt.target.value
    var pulseData = new Int8Array(raw.buffer)
    pData.push(pulseData[0]);
	cData.push(pulseData[0]);
	tData.push(Date.now())
}
function Sampling(start)
{
	pulseCharacteristic.writeValue(Uint8Array.of(start))
}
/// the function executing at requestAnimationFrame.
/// otherwise 80Hz update rate would lock up my browser (I guess depends on screen refresh rate)
function step() {
	if (pData.length) {
        Plotly.extendTraces(
            pulseGraphDiv,
            {	
                y: [pData],
            },
            [0]
        );
		pData.forEach((d)=>{
			//updateChart(tData,d);
		});
		
		
		 pData.length = 0;
	}
    window.requestAnimationFrame(step)
}

function disconnect() {
    server = server && server.disconnect()
    device = undefined
    server = undefined
    pulseService = undefined
    pulseCharacteristic = undefined
}

/// Connect to the Puck
function doIt() {
    disconnect();

    navigator.bluetooth.requestDevice({ optionalServices: ['f8b23a4d-89ad-4220-8c9f-d81756009f0e'], acceptAllDevices: true })
        .then(d => {
            device = d;
            console.debug('device:', device)
            return device.gatt.connect()
        })
		
        .then(s => {
            server = s
            console.debug('server:', server)
			// get magnetometer service & characteristic:
            s.getPrimaryService('f8b23a4d-89ad-4220-8c9f-d81756009f0e')
                .then(pulseSrv => {
					console.debug('got pulseSerice:', pulseSrv)
                    pulseService = pulseSrv
                    return pulseService.getCharacteristic('f8b23a4d-89ad-4220-8c9f-d81756009f0e')
                })
                .then(pulseChs => {
					console.debug('got pulseCharacteristic:', pulseChs)
                    pulseCharacteristic = pulseChs
                    // add event listener to pulse characteristic
                    pulseChs.addEventListener('characteristicvaluechanged', pulseChanged)
                    pulseChs.startNotifications()
                })
        })
}

/// Create the initial graph & clear it
function clearIt() {
	Plotly.newPlot(pulseGraphDiv, [{
        y: [],
        type: 'scattergl',
        mode: 'lines',
        line: { color: '#00f' },
        name: 'x'
    }], { title: 'Pulse Data' });
}
window.requestAnimationFrame(step)
clearIt()
////////////////////////////////////////////////////////////////
//https://stackoverflow.com/questions/55784293/plotly-extendtraces-only-work-with-two-traces-but-not-with-three
function getData() {
  return Math.random();
};
var time = new Date();
Plotly.plot(graph_div, [{
	x:[time],
	y: [1, 2, 3].map(getData),
	name: 'x',
	mode: 'lines',
	line: { color: '#80CAF6' }
}, {
	x:[time],
	y: [1, 2, 3].map(getData),
	name: 'y',
	mode: 'lines',
	line: { color: '#DF56F1' }
}, {
	x:[time],
	y: [1, 2, 3].map(getData),
	name: 'z',
	mode: 'lines',
	line: { color: '#4D92E9' }
}]);

var cnt1 = 0;

var interval = setInterval(function () {
	var time = new Date();


  var olderTime = time.setMinutes(time.getMinutes() - 1);
  var futureTime = time.setMinutes(time.getMinutes() + 1);
  
  var minuteView = {
        xaxis: {
          type: 'date',
          range: [olderTime,futureTime]
        }
      };
  
  Plotly.relayout(graph_div, minuteView);


	Plotly.extendTraces(graph_div, {
		x:[[time],[time],[time]],
		y: [[getData()], [getData()], [getData()]]
	}, [0, 1, 2])

	//cnt1 = cnt1+1;
	if (cnt1 === 100) clearInterval(interval);
}, 300);

////////////////////////////////////////////////////////

function rand() {
  return Math.random();
}
function updateChart(td,data){
  var time = new Date();
  
  var update = {
  x:  [[time]],
  y: [[data]]
  }
  
  var olderTime = time.setMinutes(time.getMinutes() - 1);
  var futureTime = time.setMinutes(time.getMinutes() + 1);
  
  var minuteView = {
        xaxis: {
          type: 'date',
          range: [olderTime,futureTime]
        }
      };
  
  Plotly.relayout('graph', minuteView);
  Plotly.extendTraces('graph', update, [0])
 
}
var time = new Date();

var data = [{
  x: [time], 
  y: [rand],
  mode: 'lines',
  line: {color: '#80CAF6'}
}]

Plotly.plot('graph', data);  

var cnt2 = 0;

var interval = setInterval(function() {
	
   
  
  //if(cnt2 === 100) clearInterval(interval);
}, 500);

